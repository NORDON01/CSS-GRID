GHSGR5YZY4SQS3LA
 ***************
 .cell{cell $}*2
 ***************
Ce qui donne:
    <div class="cell">cell 1</div>
    <div class="cell">cell 2</div>

****
GRID
****    
<style>
    .container{
      display:grid;
      grid-template-columns: 200px 300px;
    }
</style>

*************
IMPLICIT GRID
*************
Number of rows = number of child elements / number of columns + 1 si number child elements % number of columns > 0;

*****
UNITS
*****
Possible units: px, rem, em, %, auto, fr.
auto is most usefull for responsive rows;

**
FR
**
Ex:
  grid-template-columns: 1fr 1fr 1fr;
  grid-template-rows: 1fr 1fr 1fr;

FR is better than any other unit (rem, em, px) because it takes into account the size of the GAP. It is better than %.

***
GAP
***
  grid-column-gap:20px;
  grid-row-gap:20px;
  grid-gap:10px;      //Ligne & Colonne
  grid-gap: 5px 10px; //Ligne, Colonne

  New notation:
  column-gap:20px;
  row-gap:20px;
  gap:10px;
  gap:5px 10px;

**********
GRID LINES
**********
grid-column-start:1;
grid-column-end:3;
grid-column:1/3;

grid-row-start:1;
grid-row-end:3;
grid-row:1/3;

 .cell-1{
            grid-column: 1/3;
        }

  De la ligne verticale de gauche (1) à la ligne verticale (-1) de droite
        .cell-4{
            grid-column: 1/-1;
        }

        .cell-2{
            background: yellow;
        }

**************
TEMPLATE AREAS
**************
   grid-template-areas: 
            "a a b"
            "a a b"
            "c c b"
            "d d d"
            "e f f";
        }

        .cell-1{
            grid-area: a;
        }

         .cell-2{
            grid-area: b;
        }

         .cell-3{
            grid-area: c;
        }

         .cell-4{
            grid-area: d;
        }

         .cell-5{
            grid-area: e;
        }

         .cell-6{
            grid-area: f;
        }

*****   
ORDER
*****
Par défaut tous les éléments enfant n reçoivent le rang 0 (order) r0;
L'élément n1 reçoit le rang (order) r3, l'élément n4 reçoit le rang r2, l'élément n5 reçoit le rang r4.
Si r4 < r2 < r3, les éléments sont classés:
  enfants n < n5 < n4 < n1 
  Les éléments sont classés par ordre de rang croissant

******
REPEAT
******
 grid-template-columns: 1fr 1fr 1fr;
 grid-template-rows:100px 100px 100px 100px;

Instead
 I            
 grid-template-columns: repeat(3 fr);
 grid-template-rows: repeat(4 100px);

***************
JUSTIFY CONTENT
***************
 .container{
            min-height: 100vh;
            display:grid;
            grid-template-columns: 100px 100px 100px;                       
             /* justify-content: flex-start */           
             /* justify-content: flex-end; */
            /* justify-content: center; */
             /* justify-content: space-around; */
             /* justify-content: space-between; */
             justify-content: space-evenly;
        }

*************
ALIGN-CONTENT
*************
.container{
            min-height: 100vh;
            display:grid;
            grid-template-columns: 100px 100px
             200px;
            grid-template-rows: 200px 200px;                       
            align-content: stretch;
            align-content:flex-start;
            align-content:flex-end;
            align-content:space-around;
            align-content:space-between;
            align-content:space-evenly;        
        }

*************************************************
ALIGN-ITEMS JUSTIFY-ITEMS ALIGN-SELF JUSTIFY-SELF
*************************************************
justify-items et align-items permettent de positionner respectivement horizontalement et verticalement l'ensemble des contenus éléments enfant à l'intérieur de leurs cellules respectives:

.container{
            min-height: 100vh;
            margin:1rem;
            display:grid;
            grid-template-columns:repeat(3, 1fr);
            grid-template-rows:repeat(2, 1fr);
            justify-items: space-between;
            align-items: flex-start;
        }

justify-self et align-self permettent de positionner le contenu d'un seul élément à l'intérieur de cet élément:

.cell-1{
     justify-self: flex-end;
     align-self: flex-end;
}

******
MINMAX
******
Ex:
   grid-template-columns:1fr minmax(300px, 1fr) 1fr;

   La 2ème colonne est de 300px minimum;

******************
AUTO-FIT AUTO-FILL
******************
   AUTO-FIT fits the brower with a given number of child elements.
   AUTO-FILL fills the browser as more child elements are received into the browser.

<style>
        //FIT
      .container{
        /* min-height: 100vh; */
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      }
      
      //FILL
      .container-1{
        display:grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
      }
    </style>


       
            